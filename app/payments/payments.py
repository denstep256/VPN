import asyncio
import json

from aiogram import Bot

from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, FSInputFile
from aiogram import Router, F
from datetime import datetime, timedelta

from sqlalchemy import select, delete, update

import config
from app.database.models import async_session, Static, Subscribers, Payments, User

from app.addons.utilits import calculate_expiry_date, check_available_clients_count, generate_client_name
from app.wg_api.wg_api import add_client_wg, get_config_wg

pay_router = Router()



@pay_router.callback_query(F.data.startswith('one_month'))
async def create_invoice(call: CallbackQuery):
    PROVIDER_DATA_WO_EMAIL_MONTH = {
        "receipt": {
            "items": [{
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
                "quantity": "1.00",
                "amount": {
                    "value": "199.00",
                    "currency": "RUB"
                },
                "vat_code": 1
            }]
        }
    }
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    prices = [LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü', amount=199 * 100)]  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title="–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å.",
        description='–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤ Telegram üí≥. –í –ø–æ–ª–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –°–í–û–Æ –ø–æ—á—Ç—É, –Ω–∞ –Ω–µ—ë –ø—Ä–∏–¥–µ—Ç –≤–∞—à —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.',
        payload="monthly_subs",
        provider_token=config.PAYMENT_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="subscription",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(PROVIDER_DATA_WO_EMAIL_MONTH),
    )



@pay_router.callback_query(F.data.startswith('six_month'))
async def create_invoice(call: CallbackQuery):
    PROVIDER_DATA_WO_EMAIL_SEMI = {
        "receipt": {
            "items": [{
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤",
                "quantity": "1.00",
                "amount": {
                    "value": "999.00",
                    "currency": "RUB"
                },
                "vat_code": 1
            }]
        }
    }
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    prices = [LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', amount=999 * 100)]  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title="–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 6 –º–µ—Å.",
        description='–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤ Telegram üí≥. –í –ø–æ–ª–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –°–í–û–Æ –ø–æ—á—Ç—É, –Ω–∞ –Ω–µ—ë –ø—Ä–∏–¥–µ—Ç –≤–∞—à —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.',
        payload="semi_annual_subs",
        provider_token=config.PAYMENT_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="subscription",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(PROVIDER_DATA_WO_EMAIL_SEMI),
    )


@pay_router.callback_query(F.data.startswith('twelve_month'))
async def create_invoice(call: CallbackQuery):
    PROVIDER_DATA_WO_EMAIL_ANNUAL = {
        "receipt": {
            "items": [{
                "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
                "quantity": "1.00",
                "amount": {
                    "value": "1799.00",
                    "currency": "RUB"
                },
                "vat_code": 1
            }]
        }
    }
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    prices = [LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', amount=1799 * 100)]  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title="–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 12 –º–µ—Å.",
        description='–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤ Telegram üí≥. –í –ø–æ–ª–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –°–í–û–Æ –ø–æ—á—Ç—É, –Ω–∞ –Ω–µ—ë –ø—Ä–∏–¥–µ—Ç –≤–∞—à —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.',
        payload="annual_subs",
        provider_token=config.PAYMENT_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="subscription",
        need_email=True,
        send_email_to_provider=True,
        provider_data=json.dumps(PROVIDER_DATA_WO_EMAIL_ANNUAL),
    )


@pay_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Subscribers
        user_in_subscribers = await session.scalar(
            select(Subscribers).where(Subscribers.tg_id == pre_checkout_query.from_user.id)
        )

    if user_in_subscribers:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ Subscribers, —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–ª–∞—Ç—É
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
        is_available = await check_available_clients_count()

        if is_available:
            # –†–∞–∑—Ä–µ—à–∏—Ç—å –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å—Ç—å
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        else:
            # –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                                error_message="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")


@pay_router.message(F.successful_payment)
async def handle_successful_payment(message: Message):
    async with async_session() as session:
        tg_id = message.from_user.id
        username = message.from_user.username
        payload = message.successful_payment.invoice_payload
        summa = message.successful_payment.total_amount / 100
        provider_payment_charge_id = message.successful_payment.provider_payment_charge_id

        new_payment = Payments(
            tg_id=tg_id,
            username=username,
            summa=summa,
            time_to_add=datetime.now(),
            payload=payload,
            provider_payment_charge_id=provider_payment_charge_id
        )
        session.add(new_payment)
        await session.commit()

        #–†–ê–ë–û–¢–ê–ï–¢
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ static
        query = select(Static).where(Static.tg_id == tg_id)
        # query = await session.scalar(select(Static.tg_id == tg_id))
        result = await session.execute(query)
        user_in_static = result.scalar_one_or_none()

        if user_in_static:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ static, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∑–∞–ø–∏—Å—å
            delete_query = delete(Static).where(Static.tg_id == tg_id)
            # delete_query = await session.delete(select(Static.tg_id == tg_id))
            await session.execute(delete_query)
            await session.commit()

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç payload
            expiry_date = await calculate_expiry_date(payload)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É subscribers
            new_subscriber = Subscribers(
                tg_id=tg_id,
                username=username,
                file_name='check',
                subscription=payload,
                expiry_date=expiry_date,
                notif_oneday=False
            )
            session.add(new_subscriber)

            user = await session.execute(
                select(User).filter_by(tg_id=tg_id)
            )
            user = user.scalar_one_or_none()

            if user:
                user.is_active_subs = True
                user.use_subs = True
                session.add(user)
            await session.commit()

            await message.answer(f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {expiry_date}.\n\n–í–∞—à —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª</b>.\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è', parse_mode="HTML")


        else:
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ subscribers –∏ is_active_subs == True
            query = select(Subscribers).where(Subscribers.tg_id == tg_id)
            result = await session.execute(query)
            user_in_subscribers = result.scalar_one_or_none()

            query_is_active_subs = select(User).where(User.is_active_subs == True, User.tg_id == tg_id)
            result_subs = await session.execute(query_is_active_subs)
            user_is_active_subs = result_subs.scalar_one_or_none()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ subscribers –∏ —É –Ω–µ–≥–æ is_active_subs == True –≤ —Ç–∞–±–ª–∏—Ü–µ User
            # query = (
            #     select(Subscribers)
            #     .join(User)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã Subscribers –∏ User
            #     .where(Subscribers.tg_id == tg_id, User.is_active_subs == True)
            # )
            # result = await session.execute(query)
            # user_in_subscribers_with_active_subs = result.scalar_one_or_none()

            if user_in_subscribers and user_is_active_subs:
                #–†–ê–ë–û–¢–ê–ï–¢
                # 3. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_expiry_date = user_in_subscribers.expiry_date

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç payload
                if payload == 'monthly_subs':
                    current_expiry_date = datetime.strptime(current_expiry_date,
                                                            "%Y-%m-%d")  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                    new_expiry_date = (current_expiry_date + timedelta(days=31)).date()
                elif payload == 'semi_annual_subs':
                    current_expiry_date = datetime.strptime(current_expiry_date,
                                                            "%Y-%m-%d")
                    new_expiry_date = (current_expiry_date + timedelta(days=182)).date()  # –ø–æ–ª–≥–æ–¥–∞
                elif payload == 'annual_subs':
                    current_expiry_date = datetime.strptime(current_expiry_date,
                                                            "%Y-%m-%d")
                    new_expiry_date = (current_expiry_date + timedelta(days=365)).date()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user_in_subscribers.expiry_date = new_expiry_date
                user_in_subscribers.notif_oneday = False
                user_in_subscribers.note = ' '
                user_in_subscribers.subscription = payload
                await session.commit()
                await message.answer(f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_expiry_date}.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è', parse_mode="HTML")

            else:
                #–†–ê–ë–û–¢–ê–ï–¢
                # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É subscribers
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç payload
                expiry_date = await calculate_expiry_date(payload)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É subscribers
                new_subscriber = Subscribers(
                    tg_id=tg_id,
                    username=username,
                    file_name='check',
                    subscription=payload,
                    expiry_date=expiry_date,
                    notif_oneday=False
                )
                session.add(new_subscriber)

                user = await session.execute(
                    select(User).filter_by(tg_id=tg_id)
                )
                user = user.scalar_one_or_none()

                if user:
                    user.is_active_subs = True
                    user.use_subs = True
                    session.add(user)
                await session.commit()

                await message.answer(f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {expiry_date}.\n\n–í–∞—à —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª</b>.\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è', parse_mode="HTML")


        query = select(Subscribers).filter_by(file_name='check', tg_id=tg_id)
        result = await session.execute(query)
        subscriber = result.scalars().first()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º first(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π (–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –æ–±—ä–µ–∫—Ç

        if subscriber:
            client_name = generate_client_name()
            await add_client_wg(client_name)
            await get_config_wg(client_name)
            await asyncio.sleep(1)
            file_path = f"app/auth/{client_name}.conf"  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            document = FSInputFile(file_path)
            await message.answer_document(document)

            update_query = (
                update(Subscribers)
                .where(Subscribers.tg_id == tg_id)
                .values(file_name=client_name)
            )
            await session.execute(update_query)
            await session.commit()
            #–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_name –ø–æ tg_id
            query = select(Subscribers.file_name).filter_by(tg_id=tg_id)
            result = await session.execute(query)
            file_name = result.scalar_one_or_none()  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            file_path = f"app/auth/{file_name}.conf"  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            document = FSInputFile(file_path)
            await message.answer_document(document)

