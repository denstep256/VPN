import json
from datetime import datetime

from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart
from aiogram import Router, F
from sqlalchemy import select

import app.users.keyboard as kb
import app.admin.admin_keyboard as admin_kb
import app.database.requests as rq
from app.database.models import TestPeriod, Subscribers, async_session
from config import ADMIN_ID

router = Router()

with open("app/addons/texts.json", encoding="utf-8") as file_handler:
    text_mess = json.load(file_handler)
    texts_for_bot = text_mess


@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user_start(message.from_user.id,
                      message.from_user.username,
                      message.from_user.first_name,
                      datetime.now())
    await message.answer(texts_for_bot["start_message"], parse_mode='HTML', reply_markup=kb.main)
    if message.from_user.id == int(ADMIN_ID):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=admin_kb.main_admin)

@router.message(F.text == '–ü–æ–º–æ—â—å üÜò')
async def help_main_button(message: Message):
    await message.answer(texts_for_bot["help_message"], parse_mode='HTML', reply_markup=kb.help_kb)

@router.message(F.text == '–û VPN ‚ÑπÔ∏è')
async def help_main_button(message: Message):
    await message.answer(texts_for_bot["about_message"], parse_mode='HTML')

@router.message(F.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ')
async def check_subscribe_button(message: Message):

    async with async_session() as session:
        tg_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ Subscribers
        subscriber = await session.scalar(
            select(Subscribers).where(Subscribers.tg_id == tg_id)
        )

        if subscriber:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            expiry_date = subscriber.expiry_date
            await message.answer(f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date}.", parse_mode='HTML')

            query = select(Subscribers.file_name).filter_by(tg_id=tg_id)
            result = await session.execute(query)
            file_name = result.scalar_one_or_none()  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            file_path = f"app/auth/{file_name}.conf"  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            document = FSInputFile(file_path)
            await message.answer_document(document)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ Subscribers, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ TestPeriod
        test_period_user = await session.scalar(
            select(TestPeriod).where(TestPeriod.tg_id == tg_id)
        )

        if test_period_user:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            expiry_date = test_period_user.expiry_date
            await message.answer(f"‚úÖ –í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date}.", parse_mode='HTML')

            query = select(TestPeriod.file_name).filter_by(tg_id=tg_id)
            result = await session.execute(query)
            file_name = result.scalar_one_or_none()  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            file_path = f"app/auth/{file_name}.conf"  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            document = FSInputFile(file_path)
            await message.answer_document(document)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü
        await message.answer(texts_for_bot["not_active_subs"], parse_mode='HTML')

@router.message(F.text == '–ö—É–ø–∏—Ç—å üí≥')
async def help_main_button(message: Message):
    photo = FSInputFile("app/Pictures/WireGuard_ logo.jpeg")
    await message.answer_photo(photo, caption=texts_for_bot["wireguard_photo_message"],parse_mode='HTML',
                               reply_markup=kb.buy_kb)


@router.message(F.text == '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
async def help_main_button(message: Message):
    if message.from_user.id == int(ADMIN_ID):
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ê–¥–º–∏–Ω)', reply_markup=admin_kb.main_admin)
    else:
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)

@router.message(F.text == '–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å ‚öôÔ∏è')
async def help_main_button(message: Message):
    await message.answer(texts_for_bot["how_to_connect"], reply_markup=kb.how_to_connect_kb)


@router.message(F.text == 'iPhone üì±')
async def help_main_button(message: Message):
    await message.answer(texts_for_bot['iphone_message'], reply_markup=kb.iphone_kb)

@router.message(F.text == 'Android üì±')
async def help_main_button(message: Message):
    await message.answer(texts_for_bot['android_message'], reply_markup=kb.android_kb)

@router.message(F.text == '–°–∫–∞—á–∞–ª‚úÖ')
async def help_main_button(message: Message):
    await message.answer(texts_for_bot['download_message'], reply_markup=kb.download_kb)

# @router.message()
# async def default_answer(message: Message):
#     await message.answer('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é')


